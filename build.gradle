plugins {
    id 'org.springframework.boot' version '3.5.0'
    id 'groovy'
    id "com.github.ben-manes.versions" version "0.52.0"
    id "se.patrikerdes.use-latest-versions" version "0.2.18"
}

group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates") {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

dependencies {
    implementation 'org.apache.groovy:groovy:4.0.27'
    implementation 'org.apache.groovy:groovy-json:4.0.27'

    implementation 'org.springframework.boot:spring-boot-starter-web:3.5.0'

    testImplementation platform('org.junit:junit-bom:5.12.2')
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.5.0'
    testImplementation 'org.spockframework:spock-core:2.3-groovy-4.0'
    testImplementation 'org.spockframework:spock-spring:2.3-groovy-4.0'
}

test {
    useJUnitPlatform()
    systemProperties System.getProperties()
}

tasks.register('loadTest') {
    group = 'verification'
    description = 'Starts app (unless in staging), runs k6 test, then stops app.'

    doLast {
        if (System.getProperty('environment') == 'staging') {
            println "Environment is 'staging' â€” skipping app startup."
            def env = new HashMap<>(System.getenv())
            env.put('STAGING', 'true')

            def pb = new ProcessBuilder('k6', 'run', '--log-output=stdout', 'src/performance/heartbeatLoadTest.js')
            pb.environment().putAll(env)

            def k6 = pb.start()
            k6.inputStream.eachLine { println it }
            k6.waitFor()
            return
        }

        def appProcess = ['./gradlew', 'bootRun'].execute()
        println 'Starting app...'

        def started = false
        def retries = 30
        def heartbeatUrl = 'http://localhost:8080/heartbeat'

        for (int i = 0; i < retries; i++) {
            try {
                def conn = new URL(heartbeatUrl).openConnection()
                conn.setConnectTimeout(1000)
                conn.setReadTimeout(1000)
                if (conn.responseCode == 200) {
                    println "App is up!"
                    started = true
                    break
                }
            } catch (Exception ignored) {}
            println "Waiting for app... (${i + 1}/${retries})"
            sleep(1000)
        }

        if (!started) {
            println "App failed to start in time. Aborting test."
            appProcess.destroy()
            throw new GradleException("App did not respond on /heartbeat")
        }

        try {
            def k6 = ['k6', 'run', 'src/performance/heartbeatLoadTest.js'].execute()
            k6.in.eachLine { println it }
            k6.waitFor()
        } finally {
            println "Stopping app..."
            appProcess.destroy()
        }
    }
}
